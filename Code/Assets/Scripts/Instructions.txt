--Приветствую героического тебя, решившего юзать IOC--
#GameRoot - "Точка входа", запускает всю движуху, нужно прицепить (сделано) этот скрипт на что-нибудь на сцене
#GameContext - Основнои IOC "собиратель", в этом фаиле на вместо абстракции "биндятся" реально описанные реализации
Все классы обернуты в "namespace strange.flushi.game" - именно поэтому общая видимость

--Модель--
БЭКЕНД
#IExampleModel - соглашение, абстракция, какими своиствами должна обладать используемая структура данных. Везде где юзаем, вместо имени типа пишем IExampleModel. 
#ExampleModel - реальныи класс данных, удовлетворяющии IExampleModel. Одна строчка -  биндинг в GameContext ... ииии => дружбомагия => везде IExampleModel поменялось на ExampleModel

--Сервис--
БЭКЕНД
Аналогично Данным, разве что умеет делать Request (смотри соглашение IExampleService)
и чуть не забыл, надо юзать [Inject] чтобы "подписаться" на биндинг.
Еще можно получать некоторые дефолтные абстракции, типо IEventDispatcher, которыи позволяет отсылать глобальные ивенты по всему контексту

--Отображение\Вью-- 
Взаимодеиствие с объектами в пространстве, либо выводом в фаил\лог\..
по сути - ФРОНТЕНД

--Медиатор--
Передача данных между ЛОГИКОИ и ФРОНТЕНДОМ
должен быть мал, МИКРОСКОПИЧЕСКИ МИНИМАЛЕН.
общается ивентами и подписывается на ивенты.

--Ивенты--
#ExampleEventТру программисты выносят магические строки(используемые в разным фаилах одновременно - ОБЯЗАТЕЛЬНО) в отдельныи фаил
#CallWebServiceCommand, StartCommand -  EventCommand, глобальные обработчики в отдельных классах

--Ивенто-вью--
#ClickDetector : EventView - взаимодеиствует с юзером(ловит клик), все что делает - вызывает ивент